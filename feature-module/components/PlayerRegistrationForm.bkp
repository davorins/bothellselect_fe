import React, { useState, useEffect, ChangeEvent, FormEvent } from 'react';
import axios from 'axios';
import { CreditCard, PaymentForm } from 'react-square-web-payments-sdk';
import { useAuth } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';

// Set API base URL - use environment variable if available, otherwise default to local development
const API_BASE_URL =
  process.env.REACT_APP_API_BASE_URL || 'https://bothellselect.com/api';

// Square configuration
const SQUARE_APP_ID = 'sandbox-sq0idb-I4PAJ1f1XKYqYSwLovq0xQ';
const SQUARE_LOCATION_ID = 'LCW4GM814GWXK';

interface Player {
  _id?: string;
  fullName: string;
  gender: string;
  dob: string;
  schoolName: string;
  grade: string;
  healthConcerns: string;
  aauNumber: string;
  registrationYear: number;
  season: string;
}

const getCurrentSeason = (): string => {
  const now = new Date();
  const month = now.getMonth() + 1;

  if (month >= 3 && month <= 5) {
    return 'Spring';
  } else if (month >= 6 && month <= 8) {
    return 'Summer';
  } else if (month >= 9 && month <= 11) {
    return 'Fall';
  } else {
    return 'Winter';
  }
};

const PlayerRegistrationForm = ({ playerId }: { playerId?: string }) => {
  const { parent, players, isAuthenticated, logout } = useAuth();
  const navigate = useNavigate();
  const [player, setPlayer] = useState<Player>({
    fullName: '',
    gender: '',
    dob: '',
    schoolName: '',
    grade: '',
    healthConcerns: '',
    aauNumber: '',
    registrationYear: new Date().getFullYear(),
    season: getCurrentSeason(),
  });

  const [isRegistered, setIsRegistered] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [paymentError, setPaymentError] = useState('');
  const [isProcessingPayment, setIsProcessingPayment] = useState(false);

  // Check authentication status
  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/login');
    }
  }, [isAuthenticated, navigate]);

  useEffect(() => {
    const fetchPlayerData = async () => {
      if (!playerId) return;

      setIsLoading(true);
      try {
        // First try to find in local players array
        const localPlayer = players.find((p) => p._id === playerId);
        if (localPlayer) {
          setPlayer({
            fullName: localPlayer.fullName,
            gender: localPlayer.gender,
            dob: localPlayer.dob,
            schoolName: localPlayer.schoolName,
            grade: localPlayer.grade,
            healthConcerns: localPlayer.healthConcerns || '',
            aauNumber: localPlayer.aauNumber || '',
            registrationYear:
              localPlayer.registrationYear || new Date().getFullYear(),
            season: localPlayer.season || getCurrentSeason(),
          });
          return;
        }

        // Fall back to API call
        const token = localStorage.getItem('token');
        if (!token) {
          throw new Error('No token found');
        }

        const response = await axios.get<Player>(
          `${API_BASE_URL}/players/${playerId}`,
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        const existingPlayer = response.data;
        if (existingPlayer) {
          setPlayer({
            fullName: existingPlayer.fullName,
            gender: existingPlayer.gender,
            dob: existingPlayer.dob,
            schoolName: existingPlayer.schoolName,
            grade: existingPlayer.grade,
            healthConcerns: existingPlayer.healthConcerns || '',
            aauNumber: existingPlayer.aauNumber || '',
            registrationYear:
              existingPlayer.registrationYear || new Date().getFullYear(),
            season: existingPlayer.season || getCurrentSeason(),
          });
        }
      } catch (error) {
        console.error('Error fetching player data:', error);
        setError('Failed to load player data');
      } finally {
        setIsLoading(false);
      }
    };

    fetchPlayerData();
  }, [playerId, players]);

  const formatDate = (dateString: string): string => {
    if (!dateString || typeof dateString !== 'string') {
      return '';
    }

    // Handle both MM/DD/YYYY and YYYY-MM-DD formats
    if (dateString.includes('/')) {
      const parts = dateString.split('/');
      if (parts.length !== 3) return '';
      const [month, day, year] = parts;
      return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
    }

    return dateString; // Assume it's already in YYYY-MM-DD format
  };

  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError('');

    if (
      !player.fullName ||
      !player.gender ||
      !player.dob ||
      !player.schoolName ||
      !player.grade
    ) {
      setError('Please fill out all required fields for the player.');
      return;
    }

    const formattedPlayer = {
      ...player,
      dob: formatDate(player.dob),
      parentId: localStorage.getItem('parentId'),
    };

    setIsLoading(true);
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        throw new Error('No token found. Please log in.');
      }

      await axios.post(`${API_BASE_URL}/players/register`, formattedPlayer, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      setIsSubmitted(true);
      setIsRegistered(true);
    } catch (error) {
      console.error('Error registering player:', error);
      setError(
        error instanceof Error
          ? error.message
          : 'An error occurred. Please try again.'
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handlePayment = async (tokenResult: any) => {
    setIsProcessingPayment(true);
    setPaymentError('');

    try {
      if (tokenResult.status !== 'OK') {
        throw new Error('Payment processing failed');
      }

      const paymentData = {
        sourceId: tokenResult.token,
        amount: 10000, // $100 in cents
        playerId: playerId,
        parentId: localStorage.getItem('parentId'),
        cardDetails: tokenResult.details?.card || {
          last_4: '****',
          card_brand: 'UNKNOWN',
          exp_month: '00',
          exp_year: '00',
        },
        locationId: SQUARE_LOCATION_ID,
      };

      const response = await axios.post(
        `${API_BASE_URL}/payment/square-payment`,
        paymentData,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem('token')}`,
          },
        }
      );

      if (response.data.success) {
        setIsSubmitted(true);
      } else {
        throw new Error(response.data.error || 'Payment failed');
      }
    } catch (error) {
      console.error('Payment processing error:', error);
      setPaymentError(
        error instanceof Error ? error.message : 'Payment processing failed'
      );
    } finally {
      setIsProcessingPayment(false);
    }
  };

  const handleChange = (
    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const { name, value } = e.target;
    setPlayer({
      ...player,
      [name]: value,
    });
  };

  if (!isAuthenticated) {
    return (
      <div className='content content-two'>
        <div className='alert alert-warning'>
          <h4>Session Expired</h4>
          <p>Please log in to access player registration.</p>
        </div>
      </div>
    );
  }

  if (isRegistered) {
    return (
      <div className='content content-two'>
        <div className='payment-notice'>
          <div className='alert alert-success mb-4'>
            <h4>Registration Confirmed!</h4>
            <p>
              Your kid is successfully registered for the {player.season}{' '}
              {player.registrationYear} season, but payment is required to
              complete the process.
            </p>
          </div>

          <div className='row card payment-card'>
            <div className='card-header bg-light'>
              <h5>Payment Required</h5>
            </div>
            <div className='card-body'>
              {paymentError && (
                <div className='alert alert-danger'>{paymentError}</div>
              )}
              <div className='registered-players mb-4'>
                <h6>Registered Player:</h6>
                <ul className='list-group'>
                  <li className='list-group-item'>
                    {player.fullName} - {player.grade}th Grade
                  </li>
                </ul>
              </div>
              <div className='payment-options'>
                <div className='card'>
                  <div className='card-body'>
                    <h5>Credit/Debit Card</h5>
                    <PaymentForm
                      applicationId={SQUARE_APP_ID}
                      locationId={SQUARE_LOCATION_ID}
                      cardTokenizeResponseReceived={handlePayment}
                      createPaymentRequest={() => ({
                        countryCode: 'US',
                        currencyCode: 'USD',
                        total: {
                          amount: '100.00',
                          label: 'Total',
                        },
                      })}
                    >
                      <CreditCard />
                    </PaymentForm>
                  </div>
                </div>
              </div>
              <div className='card'>
                <div className='card-body'>
                  <h5>Other Payment Methods</h5>
                  <p className='text-muted'>
                    Contact us to arrange alternative payment:
                  </p>
                  <ul className='payment-contacts'>
                    <li>
                      <i className='ti ti-phone'></i> (425) 375-5235
                    </li>
                    <li>
                      <i className='ti ti-mail'></i> basketballselect@proton.me
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            <div className='payment-reminder mb-4'>
              <div className='alert alert-warning'>
                <p>
                  <strong>Important:</strong> Your child's spot will be reserved
                  for 48 hours pending payment. Unpaid registrations may be
                  cancelled after this period.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className='content content-two'>
      {isSubmitted ? (
        <div className='text-center'>
          <h3>Thank you for registering the player!</h3>
          <p>We will contact you shortly with further details.</p>
        </div>
      ) : (
        <>
          {parent && (
            <div className='alert alert-info mb-4'>
              <h4>Welcome, {parent.fullName}!</h4>
              {players.length > 0 && (
                <p>
                  Registered Players:{' '}
                  {players.map((p) => p.fullName).join(', ')}
                </p>
              )}
            </div>
          )}

          {error && <div className='alert alert-danger'>{error}</div>}
          <p>
            We're thrilled to have your child join us this season! Seeing
            siblings grow, learn, and create unforgettable memories together is
            one of the most rewarding parts of what we do. That's why we're
            excited to invite you to register your second child for the camp!
            Please fill out the registration form below.
          </p>
          <form onSubmit={handleSubmit}>
            <div className='card'>
              <div className='card-header bg-light'>
                <div className='d-flex align-items-center'>
                  <span className='bg-white avatar avatar-sm me-2 text-gray-7 flex-shrink-0'>
                    <i className='ti ti-user-plus fs-16' />
                  </span>
                  <h4 className='text-dark'>New Player Registration</h4>
                </div>
              </div>
              <div className='card-body pb-1'>
                <div className='row'>
                  <div className='col-md-6'>
                    <div className='mb-3'>
                      <label className='form-label'>Full Name</label>
                      <input
                        type='text'
                        name='fullName'
                        className='form-control'
                        value={player.fullName}
                        onChange={handleChange}
                        required
                        placeholder="Enter player's full name"
                      />
                    </div>
                  </div>
                  <div className='col-md-6'>
                    <div className='mb-3'>
                      <label className='form-label'>Gender</label>
                      <select
                        name='gender'
                        className='form-control'
                        value={player.gender}
                        onChange={handleChange}
                        required
                      >
                        <option value=''>Select Gender</option>
                        <option value='Male'>Male</option>
                        <option value='Female'>Female</option>
                      </select>
                    </div>
                  </div>
                  <div className='col-md-6'>
                    <div className='mb-3'>
                      <label className='form-label'>Date of Birth</label>
                      <input
                        type='text'
                        name='dob'
                        className='form-control'
                        value={player.dob}
                        onChange={handleChange}
                        placeholder='MM/DD/YYYY'
                        required
                      />
                    </div>
                  </div>
                  <div className='col-md-6'>
                    <div className='mb-3'>
                      <label className='form-label'>School Name</label>
                      <input
                        type='text'
                        name='schoolName'
                        className='form-control'
                        value={player.schoolName}
                        onChange={handleChange}
                        required
                        placeholder='Enter school name'
                      />
                    </div>
                  </div>
                  <div className='col-md-6'>
                    <div className='mb-3'>
                      <label className='form-label'>Grade</label>
                      <select
                        name='grade'
                        className='form-control'
                        value={player.grade}
                        onChange={handleChange}
                        required
                      >
                        <option value=''>Select Grade</option>
                        {[...Array(12)].map((_, index) => (
                          <option key={index + 1} value={`${index + 1}`}>
                            {index + 1}
                            {index === 0
                              ? 'st'
                              : index === 1
                              ? 'nd'
                              : index === 2
                              ? 'rd'
                              : 'th'}{' '}
                            Grade
                          </option>
                        ))}
                      </select>
                    </div>
                  </div>
                  <div className='col-md-6'>
                    <div className='mb-3'>
                      <label className='form-label'>Health Concerns</label>
                      <input
                        type='text'
                        name='healthConcerns'
                        className='form-control'
                        value={player.healthConcerns}
                        onChange={handleChange}
                        placeholder='None (if none)'
                      />
                    </div>
                  </div>
                  <div className='col-md-6'>
                    <div className='mb-3'>
                      <label className='form-label'>AAU Number</label>
                      <input
                        type='text'
                        name='aauNumber'
                        className='form-control'
                        value={player.aauNumber}
                        onChange={handleChange}
                        placeholder='Optional'
                      />
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div className='text-end mt-3'>
              <button
                type='submit'
                className='btn btn-primary w-100'
                disabled={isLoading}
              >
                {isLoading ? 'Processing...' : 'Register New Player'}
              </button>
            </div>
          </form>
        </>
      )}
    </div>
  );
};

export default PlayerRegistrationForm;
