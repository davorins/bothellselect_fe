{"ast":null,"code":"import * as o from \"react\";\nimport { useForm as q } from \"../../contexts/form/form.es.mjs\";\nimport { useEventListener as E } from \"../../hooks/use-event-listener.es.mjs\";\nimport { ButtonLoader as b } from \"./google-pay.styles.es.mjs\";\nconst O = ({\n  buttonColor: l,\n  buttonSizeMode: c = \"fill\",\n  buttonType: u = \"long\",\n  id: f = \"rswps-google-pay-container\",\n  ...p\n}) => {\n  const [s, P] = o.useState(() => {}),\n    {\n      cardTokenizeResponseReceived: h,\n      createPaymentRequest: a,\n      payments: i\n    } = q(),\n    g = o.useRef(null),\n    m = o.useMemo(() => {\n      const t = {\n        buttonColor: l,\n        buttonSizeMode: c,\n        buttonType: u\n      };\n      return Object.keys(t).reduce((e, r) => (t[r] !== void 0 && (e[r] = t[r]), e), {});\n    }, [l, c, u]),\n    R = async t => {\n      if (t.stopPropagation(), !s) {\n        console.warn(\"Google Pay button was clicked, but no Google Pay instance was found.\");\n        return;\n      }\n      try {\n        const e = await s.tokenize();\n        if (e.status === \"OK\") return h(e);\n        let r = `Tokenization failed with status: ${e.status}`;\n        if (e?.errors) throw r += ` and errors: ${JSON.stringify(e?.errors)}`, new Error(r);\n        console.warn(r);\n      } catch (e) {\n        console.error(e);\n      }\n    };\n  return o.useEffect(() => {\n    if (!a) throw new Error(\"`createPaymentRequest()` is required when using digital wallets\");\n    const t = new AbortController(),\n      {\n        signal: e\n      } = t;\n    return (async w => {\n      const y = i?.paymentRequest(a);\n      if (!y) throw new Error(\"`paymentRequest` is required when using digital wallets\");\n      try {\n        const n = await i?.googlePay(y).then(d => {\n          if (!w?.aborted) return P(d), d;\n        });\n        await n?.attach(`#${f}`, m), w.aborted && (await n?.destroy());\n      } catch (n) {\n        console.error(\"Initializing Google Pay failed\", n);\n      }\n    })(e), () => {\n      t.abort();\n    };\n  }, [a, i, m]), E({\n    listener: R,\n    type: \"click\",\n    element: g,\n    options: {\n      passive: !0\n    }\n  }), /* @__PURE__ */o.createElement(\"div\", {\n    ...p,\n    id: f,\n    ref: g\n  }, s ? null : /* @__PURE__ */o.createElement(b, null));\n};\nexport { O as default };","map":{"version":3,"names":["O","GooglePay","buttonColor","l","buttonSizeMode","c","buttonType","u","id","f","p","s","P","o","useState","cardTokenizeResponseReceived","h","createPaymentRequest","a","payments","i","q","g","useRef","m","useMemo","t","Object","keys","reduce","e","r","R","stopPropagation","console","warn","tokenize","status","errors","JSON","stringify","Error","error","useEffect","AbortController","signal","w","y","paymentRequest","n","googlePay","then","d","aborted","attach","destroy","abort","E","listener","type","element","options","passive","createElement","ref","b"],"sources":["/Users/davorins/Desktop/bs/node_modules/react-square-web-payments-sdk/src/components/google-pay/google-pay.tsx"],"sourcesContent":["// Dependencies\nimport * as React from 'react';\nimport type * as Square from '@square/web-sdk';\n\n// Internals\nimport { useForm } from '~/contexts/form';\nimport { useEventListener } from '~/hooks/use-event-listener';\nimport { ButtonLoader } from './google-pay.styles';\nimport type { GooglePayProps } from './google-pay.types';\n\n/**\n * Renders a Google Pay button to use in the Square Web Payment SDK, pre-styled\n * to meet Google's branding guidelines.\n *\n * **Remember** that you need to set `createPaymentRequest()` in `SquareForm` if\n * you going to use this Payment Method\n *\n * @example\n *\n * ```tsx\n * function App() {\n *   return (\n *     <SquareForm {...props}>\n *       <GooglePay />\n *     </SquareForm>\n *   );\n * }\n * ```\n */\nconst GooglePay = ({\n  buttonColor,\n  buttonSizeMode = 'fill',\n  buttonType = 'long',\n  id = 'rswps-google-pay-container',\n  ...props\n}: GooglePayProps): JSX.Element | null => {\n  const [googlePay, setGooglePay] = React.useState<Square.GooglePay | undefined>(() => undefined);\n  const { cardTokenizeResponseReceived, createPaymentRequest, payments } = useForm();\n  const containerRef = React.useRef<HTMLDivElement>(null);\n\n  const options: Square.GooglePayButtonOptions = React.useMemo(() => {\n    const baseOptions = {\n      buttonColor,\n      buttonSizeMode,\n      buttonType,\n    };\n\n    // if a value from options is undefined delete it from the options object\n    return Object.keys(baseOptions).reduce((acc: Record<string, unknown>, key) => {\n      if (baseOptions[key as keyof typeof baseOptions] !== undefined) {\n        acc[key as string] = baseOptions[key as keyof typeof baseOptions];\n      }\n\n      return acc;\n    }, {});\n  }, [buttonColor, buttonSizeMode, buttonType]);\n\n  /**\n   * Handle the on click of the Google Pay button click\n   *\n   * @param e An event which takes place in the DOM.\n   * @returns The data be sended to `cardTokenizeResponseReceived()` function, or an error\n   */\n  const handlePayment = async (e: Event) => {\n    e.stopPropagation();\n\n    if (!googlePay) {\n      console.warn('Google Pay button was clicked, but no Google Pay instance was found.');\n\n      return;\n    }\n\n    try {\n      const result = await googlePay.tokenize();\n\n      if (result.status === 'OK') {\n        return cardTokenizeResponseReceived(result);\n      }\n\n      let message = `Tokenization failed with status: ${result.status}`;\n      if (result?.errors) {\n        message += ` and errors: ${JSON.stringify(result?.errors)}`;\n\n        throw new Error(message);\n      }\n\n      console.warn(message);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!createPaymentRequest) {\n      throw new Error('`createPaymentRequest()` is required when using digital wallets');\n    }\n\n    const abortController = new AbortController();\n    const { signal } = abortController;\n\n    const start = async (signal: AbortSignal) => {\n      const paymentRequest = payments?.paymentRequest(createPaymentRequest);\n\n      if (!paymentRequest) {\n        throw new Error('`paymentRequest` is required when using digital wallets');\n      }\n\n      try {\n        const googlePay = await payments?.googlePay(paymentRequest).then((res) => {\n          if (signal?.aborted) {\n            return;\n          }\n\n          setGooglePay(res);\n\n          return res;\n        });\n\n        await googlePay?.attach(`#${id}`, options);\n\n        if (signal.aborted) {\n          await googlePay?.destroy();\n        }\n      } catch (error) {\n        console.error('Initializing Google Pay failed', error);\n      }\n    };\n\n    start(signal);\n\n    return () => {\n      abortController.abort();\n    };\n  }, [createPaymentRequest, payments, options]);\n\n  useEventListener({\n    listener: handlePayment,\n    type: 'click',\n    element: containerRef,\n    options: {\n      passive: true,\n    },\n  });\n\n  return (\n    <div {...props} id={id} ref={containerRef}>\n      {!googlePay ? <ButtonLoader /> : null}\n    </div>\n  );\n};\n\nexport default GooglePay;\nexport * from './google-pay.types';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}