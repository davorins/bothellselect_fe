{"ast":null,"code":"// utils/validation.ts\n\n// Existing validators (unchanged)\nexport const validateEmail = email => {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n};\nexport const validateRequired = value => {\n  return value.trim().length > 0;\n};\nexport const validateName = name => {\n  return name.trim().length >= 2 && /^[a-zA-Z\\s'-]+$/.test(name);\n};\nexport const validateDateOfBirth = dob => {\n  const date = new Date(dob);\n  return !isNaN(date.getTime()) && date < new Date();\n};\nexport const validateState = state => {\n  return state.length === 2 && /^[A-Z]{2}$/.test(state);\n};\nexport const validateZipCode = zip => {\n  return /^\\d{5}(-\\d{4})?$/.test(zip);\n};\nexport const validateGrade = grade => {\n  return /^([1-9]|1[0-2])$/.test(grade);\n};\nexport const validatePhoneNumber = phone => {\n  const digits = phone.replace(/\\D/g, '');\n  return digits.length === 10;\n};\n\n// New credit card validation functions\nexport const validateCreditCardNumber = cardNumber => {\n  // Remove all non-digit characters\n  const digits = cardNumber.replace(/\\D/g, '');\n\n  // Basic length check for most card types\n  if (digits.length < 13 || digits.length > 19) {\n    return false;\n  }\n\n  // Luhn algorithm validation\n  let sum = 0;\n  let shouldDouble = false;\n  for (let i = digits.length - 1; i >= 0; i--) {\n    let digit = parseInt(digits.charAt(i), 10);\n    if (shouldDouble) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n    sum += digit;\n    shouldDouble = !shouldDouble;\n  }\n  return sum % 10 === 0;\n};\nexport const validateExpirationDate = expDate => {\n  // Expected format: MM/YY or MM/YYYY\n  const match = expDate.match(/^(\\d{2})\\/(\\d{2}|\\d{4})$/);\n  if (!match) return false;\n  const month = parseInt(match[1], 10);\n  let year = parseInt(match[2], 10);\n\n  // Convert 2-digit year to 4-digit (assuming 2000s)\n  if (year < 100) {\n    year += 2000;\n  }\n\n  // Validate month\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  // Validate not expired\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = currentDate.getMonth() + 1; // Months are 0-indexed\n\n  if (year < currentYear) {\n    return false;\n  }\n  if (year === currentYear && month < currentMonth) {\n    return false;\n  }\n  return true;\n};\nexport const validateCVV = cvv => {\n  // Remove all non-digit characters\n  const digits = cvv.replace(/\\D/g, '');\n\n  // CVV can be 3 or 4 digits\n  return digits.length === 3 || digits.length === 4;\n};\nexport const validateCardHolderName = name => {\n  // Similar to validateName but more permissive for international names\n  return name.trim().length >= 2 && /^[a-zA-Z\\s\\-'.]+$/.test(name);\n};","map":{"version":3,"names":["validateEmail","email","test","validateRequired","value","trim","length","validateName","name","validateDateOfBirth","dob","date","Date","isNaN","getTime","validateState","state","validateZipCode","zip","validateGrade","grade","validatePhoneNumber","phone","digits","replace","validateCreditCardNumber","cardNumber","sum","shouldDouble","i","digit","parseInt","charAt","validateExpirationDate","expDate","match","month","year","currentDate","currentYear","getFullYear","currentMonth","getMonth","validateCVV","cvv","validateCardHolderName"],"sources":["/Users/davorins/Desktop/bs/src/utils/validation.ts"],"sourcesContent":["// utils/validation.ts\n\n// Existing validators (unchanged)\nexport const validateEmail = (email: string): boolean => {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n};\n\nexport const validateRequired = (value: string): boolean => {\n  return value.trim().length > 0;\n};\n\nexport const validateName = (name: string): boolean => {\n  return name.trim().length >= 2 && /^[a-zA-Z\\s'-]+$/.test(name);\n};\n\nexport const validateDateOfBirth = (dob: string): boolean => {\n  const date = new Date(dob);\n  return !isNaN(date.getTime()) && date < new Date();\n};\n\nexport const validateState = (state: string): boolean => {\n  return state.length === 2 && /^[A-Z]{2}$/.test(state);\n};\n\nexport const validateZipCode = (zip: string): boolean => {\n  return /^\\d{5}(-\\d{4})?$/.test(zip);\n};\n\nexport const validateGrade = (grade: string): boolean => {\n  return /^([1-9]|1[0-2])$/.test(grade);\n};\n\nexport const validatePhoneNumber = (phone: string): boolean => {\n  const digits = phone.replace(/\\D/g, '');\n  return digits.length === 10;\n};\n\n// New credit card validation functions\nexport const validateCreditCardNumber = (cardNumber: string): boolean => {\n  // Remove all non-digit characters\n  const digits = cardNumber.replace(/\\D/g, '');\n\n  // Basic length check for most card types\n  if (digits.length < 13 || digits.length > 19) {\n    return false;\n  }\n\n  // Luhn algorithm validation\n  let sum = 0;\n  let shouldDouble = false;\n\n  for (let i = digits.length - 1; i >= 0; i--) {\n    let digit = parseInt(digits.charAt(i), 10);\n\n    if (shouldDouble) {\n      digit *= 2;\n      if (digit > 9) {\n        digit -= 9;\n      }\n    }\n\n    sum += digit;\n    shouldDouble = !shouldDouble;\n  }\n\n  return sum % 10 === 0;\n};\n\nexport const validateExpirationDate = (expDate: string): boolean => {\n  // Expected format: MM/YY or MM/YYYY\n  const match = expDate.match(/^(\\d{2})\\/(\\d{2}|\\d{4})$/);\n  if (!match) return false;\n\n  const month = parseInt(match[1], 10);\n  let year = parseInt(match[2], 10);\n\n  // Convert 2-digit year to 4-digit (assuming 2000s)\n  if (year < 100) {\n    year += 2000;\n  }\n\n  // Validate month\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  // Validate not expired\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const currentMonth = currentDate.getMonth() + 1; // Months are 0-indexed\n\n  if (year < currentYear) {\n    return false;\n  }\n  if (year === currentYear && month < currentMonth) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const validateCVV = (cvv: string): boolean => {\n  // Remove all non-digit characters\n  const digits = cvv.replace(/\\D/g, '');\n\n  // CVV can be 3 or 4 digits\n  return digits.length === 3 || digits.length === 4;\n};\n\nexport const validateCardHolderName = (name: string): boolean => {\n  // Similar to validateName but more permissive for international names\n  return name.trim().length >= 2 && /^[a-zA-Z\\s\\-'.]+$/.test(name);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}