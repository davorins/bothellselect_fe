{"ast":null,"code":"var _jsxFileName = \"/Users/davorins/Desktop/bs/src/components/common/SeasonDropdown.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAuth } from '../../context/AuthContext';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { all_routes } from '../../feature-module/router/all_routes';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SeasonDropdown = ({\n  currentSeason,\n  currentYear\n}) => {\n  _s();\n  const [seasons, setSeasons] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const {\n    isAuthenticated,\n    logout\n  } = useAuth();\n  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n  useEffect(() => {\n    const fetchSeasons = async () => {\n      try {\n        if (!isAuthenticated) {\n          setError('You must be logged in to view seasons.');\n          setLoading(false);\n          return;\n        }\n        const response = await axios.get(`${API_BASE_URL}/players/seasons`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        const uniqueSeasons = Array.from(new Set(response.data.map(s => `${s.season}-${s.registrationYear}`))).map(seasonStr => {\n          const [season, year] = seasonStr.split('-');\n          return {\n            season,\n            year: parseInt(year)\n          };\n        }).sort((a, b) => b.year - a.year || a.season.localeCompare(b.season));\n        setSeasons(uniqueSeasons);\n      } catch (error) {\n        var _error$response;\n        console.error('Failed to fetch seasons:', error);\n        setError('Failed to fetch seasons. Please try again later.');\n        if (axios.isAxiosError(error) && ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n          logout();\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchSeasons();\n  }, [isAuthenticated, logout, API_BASE_URL]);\n  const handleSeasonSelect = (season, year) => {\n    const newSearchParams = new URLSearchParams(searchParams);\n    newSearchParams.set('season', season);\n    newSearchParams.set('year', year.toString());\n    navigate({\n      pathname: all_routes.PlayerList,\n      // Always navigate to playerList\n      search: `?season=${season}&year=${year}` // Append season and year as query parameters\n    });\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-item\",\n    children: \"Loading seasons...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-item text-danger\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 21\n  }, this);\n  if (seasons.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-item\",\n    children: \"No seasons available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: seasons.map(seasonData => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `dropdown-item ${currentSeason === seasonData.season && currentYear === seasonData.year.toString() ? 'active' : ''}`,\n      onClick: () => handleSeasonSelect(seasonData.season, seasonData.year),\n      children: [seasonData.season, \" \", seasonData.year]\n    }, `${seasonData.season}-${seasonData.year}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this))\n  }, void 0, false);\n};\n_s(SeasonDropdown, \"pmCrAMj90Og2lEoA9rdxlg1J/4o=\", false, function () {\n  return [useNavigate, useSearchParams, useAuth];\n});\n_c = SeasonDropdown;\nexport default SeasonDropdown;\nvar _c;\n$RefreshReg$(_c, \"SeasonDropdown\");","map":{"version":3,"names":["React","useState","useEffect","axios","useAuth","useNavigate","useSearchParams","all_routes","jsxDEV","_jsxDEV","Fragment","_Fragment","SeasonDropdown","currentSeason","currentYear","_s","seasons","setSeasons","loading","setLoading","error","setError","navigate","searchParams","isAuthenticated","logout","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","fetchSeasons","response","get","headers","Authorization","localStorage","getItem","uniqueSeasons","Array","from","Set","data","map","s","season","registrationYear","seasonStr","year","split","parseInt","sort","a","b","localeCompare","_error$response","console","isAxiosError","status","handleSeasonSelect","newSearchParams","URLSearchParams","set","toString","pathname","PlayerList","search","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","seasonData","onClick","_c","$RefreshReg$"],"sources":["/Users/davorins/Desktop/bs/src/components/common/SeasonDropdown.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useAuth } from '../../context/AuthContext';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport { all_routes } from '../../feature-module/router/all_routes';\n\ninterface SeasonData {\n  season: string;\n  year: number;\n}\n\ninterface SeasonDropdownProps {\n  currentSeason?: string;\n  currentYear?: string;\n}\n\nconst SeasonDropdown: React.FC<SeasonDropdownProps> = ({\n  currentSeason,\n  currentYear,\n}) => {\n  const [seasons, setSeasons] = useState<SeasonData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { isAuthenticated, logout } = useAuth();\n  const API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\n  useEffect(() => {\n    const fetchSeasons = async () => {\n      try {\n        if (!isAuthenticated) {\n          setError('You must be logged in to view seasons.');\n          setLoading(false);\n          return;\n        }\n\n        const response = await axios.get<\n          Array<{ season: string; registrationYear: number }>\n        >(`${API_BASE_URL}/players/seasons`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\n          },\n        });\n\n        const uniqueSeasons = Array.from(\n          new Set(response.data.map((s) => `${s.season}-${s.registrationYear}`))\n        )\n          .map((seasonStr) => {\n            const [season, year] = seasonStr.split('-');\n            return { season, year: parseInt(year) };\n          })\n          .sort((a, b) => b.year - a.year || a.season.localeCompare(b.season));\n\n        setSeasons(uniqueSeasons);\n      } catch (error) {\n        console.error('Failed to fetch seasons:', error);\n        setError('Failed to fetch seasons. Please try again later.');\n        if (axios.isAxiosError(error) && error.response?.status === 401) {\n          logout();\n        }\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSeasons();\n  }, [isAuthenticated, logout, API_BASE_URL]);\n\n  const handleSeasonSelect = (season: string, year: number) => {\n    const newSearchParams = new URLSearchParams(searchParams);\n    newSearchParams.set('season', season);\n    newSearchParams.set('year', year.toString());\n    navigate({\n      pathname: all_routes.PlayerList, // Always navigate to playerList\n      search: `?season=${season}&year=${year}`, // Append season and year as query parameters\n    });\n  };\n\n  if (loading) return <div className='dropdown-item'>Loading seasons...</div>;\n  if (error) return <div className='dropdown-item text-danger'>{error}</div>;\n  if (seasons.length === 0)\n    return <div className='dropdown-item'>No seasons available</div>;\n\n  return (\n    <>\n      {seasons.map((seasonData) => (\n        <button\n          key={`${seasonData.season}-${seasonData.year}`}\n          className={`dropdown-item ${\n            currentSeason === seasonData.season &&\n            currentYear === seasonData.year.toString()\n              ? 'active'\n              : ''\n          }`}\n          onClick={() => handleSeasonSelect(seasonData.season, seasonData.year)}\n        >\n          {seasonData.season} {seasonData.year}\n        </button>\n      ))}\n    </>\n  );\n};\n\nexport default SeasonDropdown;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}