{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { transformParentData } from '../../utils/parentUtils';\nexport const useParentData = (seasonParam, yearParam) => {\n  _s();\n  const {\n    parents = [],\n    fetchParentsData,\n    parent: currentUser,\n    fetchAllParents,\n    fetchAllGuardians\n  } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [guardians, setGuardians] = useState([]);\n  const [dataVersion, setDataVersion] = useState(0); // Used to force refreshes\n\n  // Memoize current user ID to prevent unnecessary fetches\n  const currentUserId = useMemo(() => (currentUser === null || currentUser === void 0 ? void 0 : currentUser._id) || '', [currentUser]);\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      if (!currentUser) {\n        setError('No user data found.');\n        return;\n      }\n      const queryParams = new URLSearchParams();\n      if (seasonParam) queryParams.append('season', seasonParam);\n      if (yearParam) queryParams.append('year', yearParam);\n      if (currentUser.role === 'admin') {\n        // Admin gets all data\n        const [parentsData, guardiansData] = await Promise.all([fetchAllParents(queryParams.toString()), fetchAllGuardians(queryParams.toString())]);\n        setGuardians(guardiansData || []);\n      } else {\n        // Non-admins only get their own data\n        await fetchParentsData(currentUserId);\n        setGuardians([]);\n      }\n\n      // Increment to trigger effect\n      setDataVersion(v => v + 1);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch data');\n    } finally {\n      setLoading(false);\n    }\n  }, [currentUser, currentUserId, seasonParam, yearParam, fetchAllParents, fetchAllGuardians, fetchParentsData]);\n\n  // Fetch data on mount and when dependencies change\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Transform data only when needed\n  const combinedData = useMemo(() => {\n    if (!currentUser) return [];\n    return transformParentData(parents, guardians, currentUser);\n  }, [parents, guardians, currentUser, dataVersion]);\n  return {\n    loading,\n    error,\n    combinedData,\n    fetchData: () => {\n      setDataVersion(v => v + 1);\n      fetchData();\n    },\n    rawParents: parents,\n    rawGuardians: guardians\n  };\n};\n_s(useParentData, \"dXXeaLzq8hTemzN6TGIee8aV1nQ=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useCallback","useMemo","useAuth","transformParentData","useParentData","seasonParam","yearParam","_s","parents","fetchParentsData","parent","currentUser","fetchAllParents","fetchAllGuardians","loading","setLoading","error","setError","guardians","setGuardians","dataVersion","setDataVersion","currentUserId","_id","fetchData","queryParams","URLSearchParams","append","role","parentsData","guardiansData","Promise","all","toString","v","err","Error","message","combinedData","rawParents","rawGuardians"],"sources":["/Users/davorins/Desktop/bs/src/feature-module/hooks/useParentData.ts"],"sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { transformParentData } from '../../utils/parentUtils';\nimport { Guardian } from '../../types/types';\n\nexport const useParentData = (\n  seasonParam: string | null,\n  yearParam: string | null\n) => {\n  const {\n    parents = [],\n    fetchParentsData,\n    parent: currentUser,\n    fetchAllParents,\n    fetchAllGuardians,\n  } = useAuth();\n\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [guardians, setGuardians] = useState<Guardian[]>([]);\n  const [dataVersion, setDataVersion] = useState(0); // Used to force refreshes\n\n  // Memoize current user ID to prevent unnecessary fetches\n  const currentUserId = useMemo(() => currentUser?._id || '', [currentUser]);\n\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      if (!currentUser) {\n        setError('No user data found.');\n        return;\n      }\n\n      const queryParams = new URLSearchParams();\n      if (seasonParam) queryParams.append('season', seasonParam);\n      if (yearParam) queryParams.append('year', yearParam);\n\n      if (currentUser.role === 'admin') {\n        // Admin gets all data\n        const [parentsData, guardiansData] = await Promise.all([\n          fetchAllParents(queryParams.toString()),\n          fetchAllGuardians(queryParams.toString()),\n        ]);\n        setGuardians(guardiansData || []);\n      } else {\n        // Non-admins only get their own data\n        await fetchParentsData(currentUserId);\n        setGuardians([]);\n      }\n\n      // Increment to trigger effect\n      setDataVersion((v) => v + 1);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch data');\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    currentUser,\n    currentUserId,\n    seasonParam,\n    yearParam,\n    fetchAllParents,\n    fetchAllGuardians,\n    fetchParentsData,\n  ]);\n\n  // Fetch data on mount and when dependencies change\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  // Transform data only when needed\n  const combinedData = useMemo(() => {\n    if (!currentUser) return [];\n    return transformParentData(parents, guardians, currentUser);\n  }, [parents, guardians, currentUser, dataVersion]);\n\n  return {\n    loading,\n    error,\n    combinedData,\n    fetchData: () => {\n      setDataVersion((v) => v + 1);\n      fetchData();\n    },\n    rawParents: parents,\n    rawGuardians: guardians,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}