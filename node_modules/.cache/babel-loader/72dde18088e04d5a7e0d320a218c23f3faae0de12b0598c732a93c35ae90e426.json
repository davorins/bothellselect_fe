{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { transformPlayerData } from '../../utils/playerUtils';\nexport const usePlayerData = (seasonParam, yearParam) => {\n  _s();\n  const {\n    players = [],\n    fetchPlayersData,\n    fetchAllPlayers,\n    parent\n  } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [playerData, setPlayerData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        if (!parent) {\n          setError('No parent data found.');\n          return;\n        }\n        const queryParams = new URLSearchParams();\n        if (seasonParam) queryParams.append('season', seasonParam);\n        if (yearParam) queryParams.append('year', yearParam);\n        if (parent.role === 'admin') {\n          await fetchAllPlayers(queryParams.toString());\n        } else if (parent.players && parent.players.length > 0) {\n          const playerIds = parent.players.map(p => typeof p === 'string' ? p : p._id);\n          await fetchPlayersData(playerIds, queryParams.toString());\n        } else {\n          setError('No players found for this account.');\n        }\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch players data. Please try again later.');\n        console.error('Error fetching players:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [fetchPlayersData, fetchAllPlayers, parent, seasonParam, yearParam]);\n  useEffect(() => {\n    if (players.length > 0) {\n      setPlayerData(transformPlayerData(players, parent));\n    }\n  }, [players, parent]);\n  return {\n    loading,\n    error,\n    playerData\n  };\n};\n_s(usePlayerData, \"SXaezfZ9enaumAoskbIIlM+WJVs=\", false, function () {\n  return [useAuth];\n});","map":{"version":3,"names":["useState","useEffect","useAuth","transformPlayerData","usePlayerData","seasonParam","yearParam","_s","players","fetchPlayersData","fetchAllPlayers","parent","loading","setLoading","error","setError","playerData","setPlayerData","fetchData","queryParams","URLSearchParams","append","role","toString","length","playerIds","map","p","_id","err","console"],"sources":["/Users/davorins/Desktop/bs/src/feature-module/hooks/usePlayerData.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { transformPlayerData } from '../../utils/playerUtils';\n\nexport const usePlayerData = (\n  seasonParam: string | null,\n  yearParam: string | null\n) => {\n  const { players = [], fetchPlayersData, fetchAllPlayers, parent } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [playerData, setPlayerData] = useState<any[]>([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        if (!parent) {\n          setError('No parent data found.');\n          return;\n        }\n\n        const queryParams = new URLSearchParams();\n        if (seasonParam) queryParams.append('season', seasonParam);\n        if (yearParam) queryParams.append('year', yearParam);\n\n        if (parent.role === 'admin') {\n          await fetchAllPlayers(queryParams.toString());\n        } else if (parent.players && parent.players.length > 0) {\n          const playerIds = parent.players.map((p: any) =>\n            typeof p === 'string' ? p : p._id\n          );\n          await fetchPlayersData(playerIds, queryParams.toString());\n        } else {\n          setError('No players found for this account.');\n        }\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch players data. Please try again later.');\n        console.error('Error fetching players:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [fetchPlayersData, fetchAllPlayers, parent, seasonParam, yearParam]);\n\n  useEffect(() => {\n    if (players.length > 0) {\n      setPlayerData(transformPlayerData(players, parent));\n    }\n  }, [players, parent]);\n\n  return { loading, error, playerData };\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,mBAAmB,QAAQ,yBAAyB;AAE7D,OAAO,MAAMC,aAAa,GAAGA,CAC3BC,WAA0B,EAC1BC,SAAwB,KACrB;EAAAC,EAAA;EACH,MAAM;IAAEC,OAAO,GAAG,EAAE;IAAEC,gBAAgB;IAAEC,eAAe;IAAEC;EAAO,CAAC,GAAGT,OAAO,CAAC,CAAC;EAC7E,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACgB,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAQ,EAAE,CAAC;EAEvDC,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFL,UAAU,CAAC,IAAI,CAAC;QAChB,IAAI,CAACF,MAAM,EAAE;UACXI,QAAQ,CAAC,uBAAuB,CAAC;UACjC;QACF;QAEA,MAAMI,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;QACzC,IAAIf,WAAW,EAAEc,WAAW,CAACE,MAAM,CAAC,QAAQ,EAAEhB,WAAW,CAAC;QAC1D,IAAIC,SAAS,EAAEa,WAAW,CAACE,MAAM,CAAC,MAAM,EAAEf,SAAS,CAAC;QAEpD,IAAIK,MAAM,CAACW,IAAI,KAAK,OAAO,EAAE;UAC3B,MAAMZ,eAAe,CAACS,WAAW,CAACI,QAAQ,CAAC,CAAC,CAAC;QAC/C,CAAC,MAAM,IAAIZ,MAAM,CAACH,OAAO,IAAIG,MAAM,CAACH,OAAO,CAACgB,MAAM,GAAG,CAAC,EAAE;UACtD,MAAMC,SAAS,GAAGd,MAAM,CAACH,OAAO,CAACkB,GAAG,CAAEC,CAAM,IAC1C,OAAOA,CAAC,KAAK,QAAQ,GAAGA,CAAC,GAAGA,CAAC,CAACC,GAChC,CAAC;UACD,MAAMnB,gBAAgB,CAACgB,SAAS,EAAEN,WAAW,CAACI,QAAQ,CAAC,CAAC,CAAC;QAC3D,CAAC,MAAM;UACLR,QAAQ,CAAC,oCAAoC,CAAC;QAChD;QACAA,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOc,GAAG,EAAE;QACZd,QAAQ,CAAC,uDAAuD,CAAC;QACjEe,OAAO,CAAChB,KAAK,CAAC,yBAAyB,EAAEe,GAAG,CAAC;MAC/C,CAAC,SAAS;QACRhB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDK,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACT,gBAAgB,EAAEC,eAAe,EAAEC,MAAM,EAAEN,WAAW,EAAEC,SAAS,CAAC,CAAC;EAEvEL,SAAS,CAAC,MAAM;IACd,IAAIO,OAAO,CAACgB,MAAM,GAAG,CAAC,EAAE;MACtBP,aAAa,CAACd,mBAAmB,CAACK,OAAO,EAAEG,MAAM,CAAC,CAAC;IACrD;EACF,CAAC,EAAE,CAACH,OAAO,EAAEG,MAAM,CAAC,CAAC;EAErB,OAAO;IAAEC,OAAO;IAAEE,KAAK;IAAEE;EAAW,CAAC;AACvC,CAAC;AAACT,EAAA,CAnDWH,aAAa;EAAA,QAI4CF,OAAO;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}