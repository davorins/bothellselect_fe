{"ast":null,"code":"export const formatDate = dateString => {\n  if (!dateString) return 'N/A';\n  try {\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return 'Invalid Date';\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Invalid Date';\n  }\n};","map":{"version":3,"names":["formatDate","dateString","date","Date","isNaN","getTime","toLocaleDateString","year","month","day","error","console"],"sources":["/Users/davorins/Desktop/bs/src/utils/dateFormatter.ts"],"sourcesContent":["export const formatDate = (dateString: string | Date | undefined): string => {\n  if (!dateString) return 'N/A';\n\n  try {\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) return 'Invalid Date';\n\n    return date.toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n    });\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return 'Invalid Date';\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAIC,UAAqC,IAAa;EAC3E,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAE7B,IAAI;IACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;IACjC,IAAIG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,cAAc;IAEhD,OAAOH,IAAI,CAACI,kBAAkB,CAAC,OAAO,EAAE;MACtCC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE;IACP,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,cAAc;EACvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}